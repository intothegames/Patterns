Состояние

Тип: поведенческий паттерн

Цель использования: позволяет объекту изменять свое поведение в зависимости от внутреннего состояния

Возможные примеры использования:
- Управление персонажем (разные состояния: бег, прыжок, атака и тд)
- Разные состояния игры 
	(например как в пошаговых боях с покемонами, в зависимости от состояния показывать разный UI, 
	по разному обрабатывать нажатия, отключать управление и тп)
- Несложные враги и NPC (например в tower defecne, враг может возрождаться, бежать, хилиться, умирать и т.д.)
- В зависимости от здоровья менять состояние игрока (можно с помощью интерфейса или анимаций персонажа и т.д.)
- Состояния машины в гонках (задний ход, передний ход, дрифт как в марио карт например и тд)

Примерные этапы использования:
- Определить сами состояния и как они будут переключаться на диаграмме (или хотя бы четко представлять схему у себя в голове).
- Создать некоторую абстракцию для всех состояния 
	(абстрактный класс или интерфейс с нужными для вызова методами, которые будут реализовывать по разному в зависимости от состояния). 
	Обязательно должны быть методы Enter и Exit для входа и выхода из состояния.
- Создать машину состояний и реализовать способ переключения между состояниями (можно посмотреть в пример из урока)
- Создать по классу на каждое состояние (или еще базовые классы, если машина состояний иерархическая). 
	Сделать логику и определить условия перехода, в соответствии с придуманной диаграммой состояний 
	(например в состояние покоя из бега мы переходим если нет ввода от пользователя)
- Заполнить машину состояний созданными состояниями и войти в одно из них в качестве начального 
	(опять-таки в примере с урока довольно наглядно все расписано)
